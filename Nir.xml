<templateSet group="Nir">
  <template name="co" value="const { $prop$, $END$ } = $1$;&#10;" description="const desctructoring" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <variable name="prop" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="crc" value="import React from &quot;react&quot;;&#10;&#10;interface IProps { &#10;  &#10;}&#10;&#10;export function $TM_FILENAME_BASE$(props: IProps) {&#10;  $END$&#10;  return (&#10;    &lt;div&gt;&lt;/div&gt; &#10;  );&#10;}" description="Creates a  React component" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="false" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rust" value="const [$state$, set$setState$] = useState($initState$);$END$" description="useState" toReformat="true" toShortenFQNames="true">
    <variable name="state" expression="" defaultValue="&quot;state&quot;" alwaysStopAt="true" />
    <variable name="setState" expression="capitalize(state)" defaultValue="" alwaysStopAt="true" />
    <variable name="initState" expression="" defaultValue="&quot;initState&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="cctx" value="const $contextName$ = React.createContext();$END$" description="Creates a context" toReformat="true" toShortenFQNames="true">
    <variable name="contextName" expression="" defaultValue="&quot;contextName&quot;" alwaysStopAt="true" />
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ur" value="const $ref$ = useRef&lt;$T$&gt;($initialValue$);$END$" description="useRef" toReformat="false" toShortenFQNames="true">
    <variable name="ref" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="T" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="initialValue" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ue" value="useEffect(() =&gt; {&#10;  $END$&#10;}, []);" description="useEffect" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="uctx" value="const { $END$ } = useContext($END1$);" description="useContext" toReformat="false" toShortenFQNames="true">
    <variable name="END1" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ucb" value="const $END1$ = useCallback(() =&gt; {&#10;  $END$&#10;}, []);" description="useCallback" toReformat="false" toShortenFQNames="true">
    <variable name="END1" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="icss" value="import styles from './$FILE_NAME$.css';" description="import css" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="clgf" value="console.log(&quot;$file$&quot;, $END$);" description="console.log() file" toReformat="true" toShortenFQNames="true">
    <variable name="file" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="clgv" value="console.log(&quot;$variable$&quot;, $variable$);" description="console.log() variable" toReformat="true" toShortenFQNames="true">
    <variable name="variable" expression="completeSmart()" defaultValue="variable" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="clgmf" value="console.log(&quot;$fileName$#$method$()&quot;, $END$);" description="console.log() filename+method" toReformat="true" toShortenFQNames="true">
    <variable name="fileName" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <variable name="method" expression="jsMethodName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="clgm" value="console.log(&quot;$method$()&quot;, $END$);" description="console.log() method" toReformat="true" toShortenFQNames="true">
    <variable name="method" expression="jsMethodName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="styles-tw" value="const styles = {&#10;  container: css(tw`$END$`)&#10;;" description="create react-native like styles with tailwind" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
      <option name="TS_TOP_LEVEL_STATEMENT" value="true" />
      <option name="TWCSS" value="true" />
    </context>
  </template>
  <template name="crc-tw" value="import React from &quot;react&quot;;&#10;import { css } from &quot;@emotion/css&quot;;&#10;import tw from &quot;@tailwindcssinjs/macro&quot;;&#10;&#10;interface IProps { &#10;  &#10;}&#10;&#10;const styles = {&#10;  container: css(tw``)&#10;;&#10;&#10;export function $TM_FILENAME_BASE$(props: IProps) {&#10;  $END$&#10;  return (&#10;    &lt;div className={styles.container}&gt;&lt;/div&gt; &#10;  );&#10;}" description="Creates a  React component with tailwind styles" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="false" />
    <context>
      <option name="JS_TOP_LEVEL_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>